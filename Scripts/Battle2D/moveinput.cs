//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Battle2D/moveinput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Moveinput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Moveinput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""moveinput"",
    ""maps"": [
        {
            ""name"": ""onCLick"",
            ""id"": ""849d63c4-709a-47c9-872d-fccf5691d7cc"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Button"",
                    ""id"": ""3d1a9ad0-773e-4a03-8b89-abb640990f08"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Ok"",
                    ""type"": ""Button"",
                    ""id"": ""8f664ccb-325c-4fb6-a838-9630f2eb8874"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WS"",
                    ""id"": ""1cab3dbc-358d-441a-baa8-ebffdd1a012e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""de0e271c-def5-4043-91f6-a30e96cf11a9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""0ee1c1ed-5947-48ab-99df-3ad239f81a58"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LeftStick"",
                    ""id"": ""c28f06c9-b418-45a5-878c-ea427e807dad"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""04cfd1ff-6928-4c1e-a163-76ac90fc1aab"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""ddb3ee61-6fe8-4ddd-9c48-4947517935d5"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0988fd17-6269-45a0-803f-8f5fe1fb4c69"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ok"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a2a7779-14fc-4b37-b287-2ef04b2211c2"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Ok"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // onCLick
        m_onCLick = asset.FindActionMap("onCLick", throwIfNotFound: true);
        m_onCLick_Move = m_onCLick.FindAction("Move", throwIfNotFound: true);
        m_onCLick_Ok = m_onCLick.FindAction("Ok", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // onCLick
    private readonly InputActionMap m_onCLick;
    private List<IOnCLickActions> m_OnCLickActionsCallbackInterfaces = new List<IOnCLickActions>();
    private readonly InputAction m_onCLick_Move;
    private readonly InputAction m_onCLick_Ok;
    public struct OnCLickActions
    {
        private @Moveinput m_Wrapper;
        public OnCLickActions(@Moveinput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_onCLick_Move;
        public InputAction @Ok => m_Wrapper.m_onCLick_Ok;
        public InputActionMap Get() { return m_Wrapper.m_onCLick; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(OnCLickActions set) { return set.Get(); }
        public void AddCallbacks(IOnCLickActions instance)
        {
            if (instance == null || m_Wrapper.m_OnCLickActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_OnCLickActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Ok.started += instance.OnOk;
            @Ok.performed += instance.OnOk;
            @Ok.canceled += instance.OnOk;
        }

        private void UnregisterCallbacks(IOnCLickActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Ok.started -= instance.OnOk;
            @Ok.performed -= instance.OnOk;
            @Ok.canceled -= instance.OnOk;
        }

        public void RemoveCallbacks(IOnCLickActions instance)
        {
            if (m_Wrapper.m_OnCLickActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IOnCLickActions instance)
        {
            foreach (var item in m_Wrapper.m_OnCLickActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_OnCLickActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public OnCLickActions @onCLick => new OnCLickActions(this);
    public interface IOnCLickActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnOk(InputAction.CallbackContext context);
    }
}
